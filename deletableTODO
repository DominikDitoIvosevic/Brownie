B1. (2 pts) Abstracted command calling scheme
You are to make adding new commands simple. 
For example, you can create a single directory where all the executable Haskell command files are kept.
You should dynamically call them when a user tries to execute a command in hash. 
Alternatively, create a (Name, Command) dictionary which can be easily modified. 
Extra points may be given for especially creative or elegant solutions.


B2. (6 pts) Conditional branching – if-then-else(-fi)
The conditional branching has to support at least a single if and a single if-else pair. 
You do not have to implement both numeric (>, <, . . . ) and string (-eq, -gt, ...) comparison.
You may pick only one. Furthermore, you do not have to support nested if-then-else statements.
Example (your syntax may be different):
if $a > 9000 then
	echo "It’s over 9000!";
else
	echo "It’s too low.";
fi


B3. (3 pts) Basic file manipulation commands mv (move), cp (copy), rm (remove), create.
They have to support both absolute and relative paths.
mv src target ⇒ Moves a source file to the target file
mv src ... directory ⇒ Moves one or more files to a target directory
cp src target ⇒ Copies a source file to the target file
cp src ... directory ⇒ Copies one or more files to a target directory
rm file ... ⇒ Removes one or more files (not directories)
create file ... ⇒ Creates one or more empty files


B4. (3 pts) Basic directory manipulation commands mv (move), cpdir (copy), mkdir (make directory), rmdir (remove directory). 
They have to support both absolute and relative paths.
mv dir ... dir ⇒ Moves one or more directories to a target directory
mv dir new name ⇒ Renames the directory to new name
cpdir dir ... directory ⇒ Copies one or more directories to a target directory
mkdir dir ... ⇒ Creates a new empty directory
rmdir dir ... ⇒ Removes an empty directory


B5. (3 pts) Basic file system navigation commands ls (list directory contents), pwd (print working/current directory), cd (change directory). 
These commands have to support both absolute and relative paths.
ls [dir] ⇒ Lists the contents of the given directory, or the current one if no argument is given.
pwd ⇒ Prints the current directory (working directory)
cd [dir] ⇒ Changes the working directory to a given one, or the user’s home directory if no argument is given.


B6. (5 pts) Stream redirection.
hash commands have to read from the stdin and write to the stdout by default.
The user has to be able to redirect input and output from and to files. 
Support the > (redirect output to file), < (redirect input from file) and >> (appends output to file) operators.
echo "Overwriting" > file.txt
echo "Appending" >> file.txt
foo < input.txt


B7. (2 pts) Basic comment syntax
B8. (3 pts) Variables, marked in a way to make them different from commands and string

B9. (2 pts) A basic cat command that dumps the contents of a variable number of files (one or more) to the screen (or a file, if redirected).


B10.
(3 pts) A basic echo command that repeats user input to the screen, replacing any
instances of variables with their values.
a=67
echo "$a bottles of beer on the wall"
# Prints "67 bottles of beer on the wall"
